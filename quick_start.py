#!/usr/bin/env python3
"""
Quick Start Script for HappyHarvest Bot
Simple setup wizard for new users
"""

import os
import sys
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.panel import Panel
from rich.text import Text

from farm_bot import HappyHarvestBot

console = Console()

def welcome_screen():
    """Display welcome screen"""
    welcome_text = Text()
    welcome_text.append("🌾 Welcome to HappyHarvest Bot! 🚜\n\n", style="bold green")
    welcome_text.append("This setup wizard will help you:\n", style="cyan")
    welcome_text.append("• Choose your farmer name\n", style="white")
    welcome_text.append("• Register with HappyHarvest API\n", style="white")
    welcome_text.append("• Configure your farming strategy\n", style="white")
    welcome_text.append("• Start your automated farming empire!\n\n", style="white")
    welcome_text.append("Let's get farming! 🌱", style="bold yellow")
    
    console.print(Panel(welcome_text, title="HappyHarvest Bot Setup"))

def get_farmer_setup():
    """Get farmer configuration from user"""
    console.print("\n[cyan]Step 1: Choose Your Farmer Identity[/cyan]")
    
    # Get farmer name
    farmer_name = Prompt.ask(
        "Enter your farmer name",
        default=f"farmer_{int(__import__('time').time())}"
    )
    
    # Validate farmer name
    if len(farmer_name) < 3:
        console.print("[red]Farmer name must be at least 3 characters long[/red]")
        return get_farmer_setup()
    
    if not farmer_name.replace('_', '').replace('-', '').isalnum():
        console.print("[red]Farmer name can only contain letters, numbers, hyphens, and underscores[/red]")
        return get_farmer_setup()
    
    console.print(f"[green]Great choice! Welcome, {farmer_name}! 🚜[/green]")
    
    return farmer_name

def configure_strategy():
    """Configure farming strategy"""
    console.print("\n[cyan]Step 2: Configure Your Farming Strategy[/cyan]")
    
    strategy_type = Prompt.ask(
        "Choose your farming strategy",
        choices=["conservative", "balanced", "aggressive"],
        default="balanced"
    )
    
    strategies = {
        "conservative": {
            "MIN_WATER_RESERVE": 50,
            "EXPANSION_WATER_THRESHOLD": 200,
            "MARKET_PREMIUM_THRESHOLD": 1.2,
            "description": "Safe strategy - keeps plenty of water reserves"
        },
        "balanced": {
            "MIN_WATER_RESERVE": 20,
            "EXPANSION_WATER_THRESHOLD": 100,
            "MARKET_PREMIUM_THRESHOLD": 1.1,
            "description": "Balanced approach - good for beginners"
        },
        "aggressive": {
            "MIN_WATER_RESERVE": 10,
            "EXPANSION_WATER_THRESHOLD": 50,
            "MARKET_PREMIUM_THRESHOLD": 1.05,
            "description": "High-risk, high-reward - invests aggressively"
        }
    }
    
    selected_strategy = strategies[strategy_type]
    console.print(f"[green]Selected: {strategy_type.title()} Strategy[/green]")
    console.print(f"[dim]{selected_strategy['description']}[/dim]")
    
    return selected_strategy

def create_env_file(farmer_name: str, strategy: dict):
    """Create .env configuration file"""
    console.print("\n[cyan]Step 3: Creating Configuration File[/cyan]")
    
    env_content = f"""# HappyHarvest Bot Configuration
# Generated by Quick Start wizard

FARMER_NAME={farmer_name}
CLIENT_ID=
CLIENT_SECRET=
LOG_LEVEL=INFO

# Strategy Configuration ({strategy.get('description', 'Custom strategy')})
MIN_WATER_RESERVE={strategy['MIN_WATER_RESERVE']}
EXPANSION_WATER_THRESHOLD={strategy['EXPANSION_WATER_THRESHOLD']}
MARKET_PREMIUM_THRESHOLD={strategy['MARKET_PREMIUM_THRESHOLD']}
"""
    
    # Check if .env already exists
    if os.path.exists('.env'):
        overwrite = Confirm.ask("Configuration file (.env) already exists. Overwrite?")
        if not overwrite:
            console.print("[yellow]Keeping existing configuration[/yellow]")
            return
    
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        console.print("[green]✅ Configuration file created successfully![/green]")
    except Exception as e:
        console.print(f"[red]❌ Failed to create configuration file: {e}[/red]")
        sys.exit(1)

def test_setup(farmer_name: str):
    """Test the bot setup"""
    console.print("\n[cyan]Step 4: Testing Setup[/cyan]")
    
    try:
        bot = HappyHarvestBot(farmer_name)
        
        # Test registration/login
        if bot.register_or_login():
            console.print("[green]✅ Successfully connected to HappyHarvest API![/green]")
            
            # Get initial stats
            profile = bot.api.get_profile()
            console.print(f"[cyan]📊 Current water: {profile.get('score', 0)}[/cyan]")
            
            return True
        else:
            console.print("[red]❌ Failed to connect to HappyHarvest API[/red]")
            return False
            
    except Exception as e:
        console.print(f"[red]❌ Setup test failed: {e}[/red]")
        return False

def main():
    """Main setup wizard"""
    welcome_screen()
    
    # Get farmer setup
    farmer_name = get_farmer_setup()
    
    # Configure strategy
    strategy = configure_strategy()
    
    # Create configuration file
    create_env_file(farmer_name, strategy)
    
    # Test setup
    if test_setup(farmer_name):
        console.print("\n[green]🎉 Setup Complete! Your farming bot is ready![/green]")
        console.print("\n[cyan]Next steps:[/cyan]")
        console.print("• Run '[yellow]python main.py[/yellow]' to start farming")
        console.print("• Use '[yellow]python main.py --stats[/yellow]' to check your progress")
        console.print("• Use '[yellow]python main.py --leaderboard[/yellow]' to see rankings")
        
        # Ask if user wants to start farming now
        start_now = Confirm.ask("\nStart farming bot now?", default=True)
        if start_now:
            console.print("\n[green]🚀 Starting your farming empire![/green]")
            bot = HappyHarvestBot(farmer_name)
            bot.start()
    else:
        console.print("\n[red]❌ Setup failed. Please check your internet connection and try again.[/red]")
        sys.exit(1)

if __name__ == "__main__":
    main() 